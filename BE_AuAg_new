#! /usr/bin/env python
import sys
import numpy as np
import ase
from ase.io import read,write
from ase.data.vdw import vdw_radii
from ase.data import chemical_symbols
from ase.calculators.neighborlist import NeighborList


if len(sys.argv)<1:
	print "Wrong!"
	sys.exit()

Ecoh_Au=-2.9641
Ecoh_Ag=-2.5814
bl_Au=0.64
bl_Ag=float(1-bl_Au)

def read_scales(moleculename):
	with open('{}'.format(moleculename),'r') as file1:
	        for count,line in enumerate(file1):
        		if count==1:
				saveline=line
				continue
	splitted=saveline.split()
        scale1=float(splitted[6])
        scale2=float(splitted[11])
	return scale1,scale2        
# function that read the final_cns.xyz to find the scale1 and scale2

for item in range(1,len(sys.argv)):
	moleculename = sys.argv[item]
	atoms1 = read(moleculename)
	scale1,scale2=read_scales(moleculename)
	# scale 1,2 equals to the result of function separatively
        atomic_numbers=atoms1.get_atomic_numbers()
        min_anum=min(atomic_numbers)
	cutoffs=[]
        for i in range(len(atomic_numbers)):
		if atomic_numbers[i]==min_anum:
	              cutoffs.append(scale1*vdw_radii[atomic_numbers[i]])
	# Here's a Commnet
		else: cutoffs.append(scale2*vdw_radii[atomic_numbers[i]])
	nl = NeighborList(cutoffs,self_interaction=False,bothways=True)
	nl.update(atoms1)
	file1 = open(moleculename,'r')
	lines = file1.readlines()
	file1.close()
	count=0
	BE=0
	for line in lines:
		if count<=1:
			count+=1
		else:
			vals=line.split()
			CN_i=float(vals[4])
			name_i=vals[0]
			if name_i=='Au':
				Ecoh_i=float(Ecoh_Au)
				bl_i=float(bl_Au) #bond energy contribution of atom i
			elif name_i=='Ag':
				Ecoh_i=float(Ecoh_Ag)
				bl_i=float(bl_Ag)
			i = count-2
			nl_i = nl.get_neighbors(i)[0]
			#print 'neighbors for atom {} is {}'.format(i,nl_i)
			for j in nl_i:
				k=j+2
				line_j=lines[k]
				vals_j=line_j.split()
				CN_j=float(vals_j[4])
				name_j=vals_j[0]
				if name_j=='Au':
					Ecoh_j=float(Ecoh_Au)
					bl_j=float(bl_Au)
				elif name_j=='Ag':
					Ecoh_j=float(Ecoh_Ag)
					bl_j=float(bl_Ag)

				BE+=(((Ecoh_i*(CN_i**0.5)/(12**0.5))/CN_i))*(bl_i/float(bl_i+bl_j))+((Ecoh_j*(CN_j**0.5)/(12**0.5))/CN_j)*(bl_j/float(bl_i+bl_j))
			count+=1
				
	print 'The CE = {} eV for the {} system'.format(BE/(count-2),moleculename)
